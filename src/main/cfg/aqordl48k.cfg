# Copyright (c) 2025 Gerald Reno, Jr.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0

FEATURES {
    # There's a reason everyone uses $2000 here though.
    STARTADDRESS: default = $2000;
}
SYMBOLS {
    __EXEHDR__:          type = import;
    __SYSTEM_CHECK__:    type = import;  # force inclusion of "system check" load chunk
    __AUTOSTART__:       type = import;  # force inclusion of autostart "trailer"
    __STACKSIZE__:       type = weak,   value = $0200; # 512 byte stack
    __STARTADDRESS__:    type = export, value = %S;
    FONTSPACE:           type = export, value = 2*$400;
    PAGESPACE:           type = export, value = 1*$800;
    SCREENSIZE:          type = export, value = $410;
    __RESERVED_MEMORY__: type = export, value = $8000 + FONTSPACE + PAGESPACE + SCREENSIZE - $3E0; # 2K for a single screen page, 2K for fonts, $410 for screen RAM (minus the OOB screen RAM) $1410-3E0 = 1030. Plus another 32K for all the stuff I want to load.

    TITLE_BANK_ID:       type = export, value=0; # Cart bank that the TITLEPAGE is in - 2 for 32K, 6 for 64K
    STARTUP_BANK_ID:     type = export, value=0; # Cart bank that the STARTUP,ONCE,GAMEINIT,DATA segments are in, same as TITLE, probably
    FONTDATA_BANK_ID:    type = export, value=0; # Cart bank that the font data segments are in, same as STARTUP, probably
    DICT_BANK_1_ID:    type = export, value=0; # ID of dictionary cart bank
    DICT_BANK_2_ID:    type = export, value=0; # ID of dictionary cart bank
    DICT_BANK_3_ID:    type = export, value=0; # ID of dictionary cart bank
    DICT_BANK_4_ID:    type = export, value=0; # ID of dictionary cart bank
    VOT_BANK_ID:       type = export, value=0; # ID of text-only opponent view
}
MEMORY {
    ZP:         file = "", define = yes, start = $0082, size = $007E;

# file header, just $FFFF
    HEADER:     file = %O,               start = $0000, size = $0002;

# CC65 "system check" load chunk
# This checks that there's enough RAM.
    SYSCHKHDR:  file = %O,               start = $0000, size = $0004;
    SYSCHKCHNK: file = %O,               start = $2E00, size = $00F6;
    SYSCHKTRL:  file = %O,               start = $0000, size = $0006;

# Title load chunk - "loading game"
    TITLE_HDR:  file = %O,               start = $0000, size = $0004;
    TITLE:      file = %O, define = yes, start = $6600, size = $01A7;
    TITLE_TRL:  file = %O,               start = $0000, size = $0006;

# "Big segments" load chunk - CODE,APP,VOT_BANK,FONTDATA,ONCE
    BIGHDR:     file = %O,               start = $0000, size = $0004;
    BIG:        file = %O, define = yes, start = $7800, size = $2000;

# Title - Credits load chunk - "loading dictionary."
    TITLEC_HDR:  file = %O,               start = $0000, size = $0004;
    TITLEC:      file = %O, define = yes, start = $67A7, size = $0299;
    TITLEC_TRL:  file = %O,               start = $0000, size = $0006;

# "Dictionary" load chunk - the four DICT segments - a bit bigger than one cart bank
    DICTHDR:    file = %O,               start = $0000, size = $0004;
    DICT:       file = %O, define = yes, start = $4000, size = $2162;

# Title - License load chunk - "loading game.."
    TITLEL_HDR:  file = %O,               start = $0000, size = $0004;
    TITLEL:      file = %O, define = yes, start = $6A40, size = $03E9;
    TITLEL_TRL:  file = %O,               start = $0000, size = $0006;

# "Rest of the segments" load chunk - one cart bank size chunk
    RESTHDR:    file = %O,               start = $0000, size = $0004;
    REST:       file = %O, define = yes, start = $A000, size = $182D;

# Title - Instructions load chunk - "starting game..."
    TITLEI_HDR:  file = %O,               start = $0000, size = $0004;
    TITLEI:      file = %O, define = yes, start = $6E29, size = $00EA;

# "main program" load chunk
    MAINHDR:    file = %O,               start = $0000, size = $0004;
    MAIN:       file = %O, define = yes, start = %S,    size = $BC20 - __STACKSIZE__ - __RESERVED_MEMORY__ - %S;
    TRAILER:    file = %O,               start = $0000, size = $0006;
}

SEGMENTS {
    # not on disk
    ZEROPAGE:  load = ZP,         type = zp;
    EXTZP:     load = ZP,         type = zp,                optional = yes;
    EXEHDR:    load = HEADER,     type = ro;

    # system check load chunk
    SYSCHKHDR: load = SYSCHKHDR,  type = ro,                optional = yes;
    SYSCHK:    load = SYSCHKCHNK, type = rw,  define = yes, optional = yes;
    SYSCHKTRL: load = SYSCHKTRL,  type = ro,                optional = yes;

    # Title load chunk
    TITLE_HDR:   load = TITLE_HDR, type = ro;
    TITLE_PAGE:  load = TITLE,    type = rw,  define = yes;
    TITLE_TRL:   load = TITLE_TRL, type = ro;

    # Title - Credits load chunk
    TITLEC_HDR:   load = TITLEC_HDR, type = ro;
    TITLEC_PAGE:  load = TITLEC,    type = rw,  define = yes;
    TITLEC_TRL:   load = TITLEC_TRL, type = ro;

    # Title - License load chunk
    TITLEL_HDR:   load = TITLEL_HDR, type = ro;
    TITLEL_PAGE:  load = TITLEL,    type = rw,  define = yes;
    TITLEL_TRL:   load = TITLEL_TRL, type = ro;

    # Title - Instructions load chunk
    TITLEI_HDR:   load = TITLEI_HDR, type = ro;
    TITLEI_PAGE:  load = TITLEI,    type = rw,  define = yes;

    # Big segments load chunk
    BIGHDR:    load = BIGHDR,    type = ro;
    CODE:      load = BIG,       type = ro,  define = yes;
    ONCE:      load = BIG,       type = ro,  define = yes, optional = yes;
    APP:       load = BIG,       type = ro,  define = yes;
    VOT_BANK:  load = BIG,       type = ro,  define = yes;
    COPYRIGHT_ROM: load = BIG,   type = ro,  define = yes;

    # Dictionary load chunk
    DICTHDR:   load = DICTHDR,    type = ro;
    DICT_BANK_1:   load = DICT,   type = ro,    define = yes;
    DICT_BANK_2:   load = DICT,   type = ro,    define = yes;
    DICT_BANK_3:   load = DICT,   type = ro,    define = yes;
    DICT_BANK_4:   load = DICT,   type = ro,    define = yes;

    # Rest of the segments load chunk
    RESTHDR:   load = RESTHDR,    type = ro;
    TRAMPOLINES:   load = REST,   type = ro,  define = yes;
    TRAMPOLINED:   load = REST,   type = ro,  define = yes;
    FONTDATA:  load = REST,       type = ro,  define = yes;
    GAMEINIT:  load = REST,       type = ro,  define = yes;
    DA:        load = REST,       type = ro,  define = yes;
    DS:        load = REST,       type = ro,  define = yes;
    MD:        load = REST,       type = ro,  define = yes;
    VIEW:      load = REST,       type = ro,  define = yes;
    DATA:      load = REST,       type = rw,  define = yes;
    RODATA:    load = REST,       type = ro,  define = yes;
    LOWCODE:   load = REST,       type = ro,  define = yes, optional = yes;
    COPYRIGHT:   load = REST,     type = ro,  define = yes;

    # main load chunk
    MAINHDR:   load = MAINHDR,    type = ro;
    STARTUP:   load = MAIN,       type = ro,  define = yes;
    LOWBSS:    load = MAIN,       type = rw,                optional = yes;  # not zero initialized
    INIT:      load = MAIN,       type = bss,               optional = yes;
    BSS:       load = MAIN,       type = bss, define = yes;
    AUTOSTRT:  load = TRAILER,    type = ro;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
