# Copyright (c) 2025 Gerald Reno, Jr.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0

FEATURES {
    # There's a reason everyone uses $2000 here.
    # Increasing it by 410 to make room for the screen.
    STARTADDRESS: default = $2000;
}
SYMBOLS {
    __EXEHDR__:          type = import;
    __AUTOSTART__:       type = import;  # force inclusion of autostart "trailer"
    __STACKSIZE__:       type = weak,   value = $0200; # 512 byte stack
    __STARTADDRESS__:    type = export, value = %S;
    FONTSPACE:           type = export, value = 2*$400;
    PAGESPACE:           type = export, value = 1*$800;
    SCREENSIZE:          type = export, value = $410;
    __RESERVED_MEMORY__: type = export, value = $8000+$410-$3E0; # 32K, I want MAIN below the 130XE bank.
    # Plus the screensize MINUS the default screen size of 3E0; screen will thus start at 3BF0

    TITLE_BANK_ID:       type = export, value=4; # bank that the TITLEPAGE is in
    STARTUP_BANK_ID:     type = export, value=4; # bank that the STARTUP,ONCE,GAMEINIT,DATA segments are in, same as TITLE, probably
    FONTDATA_BANK_ID:    type = export, value=4; # bank that the font data segments are in, same as STARTUP, probably
    DICT_BANK_1_ID:    type = export, value=0; # ID of dictionary cart bank
    DICT_BANK_2_ID:    type = export, value=0; # ID of dictionary cart bank
    DICT_BANK_3_ID:    type = export, value=1; # ID of dictionary cart bank
    DICT_BANK_4_ID:    type = export, value=1; # ID of dictionary cart bank
    VOR_CODE_BANK_ID:  type = export, value=2; # ID of opponent view (code)
    VOR_IDX_BANK_ID:   type = export, value=2; # ID of opponent view (pic index)
    VOR_PICS0_BANK_ID: type = export, value=2; # ID of view (pic data)
    VOR_PICS1_BANK_ID: type = export, value=2; # ID of view (pic data)
    VOR_PICS2_BANK_ID: type = export, value=2; # ID of view (pic data)
    VOR_PICS4_BANK_ID: type = export, value=2; # ID of view (pic data)
    VOR_PICS5_BANK_ID: type = export, value=2; # ID of view (pic data)
    CUEBALL_BANK_ID:   type = export, value=4; # ID of cueball (audio cues) must be same bank as TRAMPOLINED
    TRAMPOLINE_BANK_ID:  type = export, value=4; # bank that the trampoline code is in
}
MEMORY {
#
# 130XE LAYOUT
#
# 0000-3FFF (00-16K) ZP,MAIN, and the reserved memory: Just like a 600XL!
# 4000-7FFF (16-32K) Five bank-switched blocks at the same address.
# 8000-BFFF (32-48K) the 16K where the cartridge would be. (BASIC can be bankswitched in)
# C000-CFFF (48-52K) OS, but there is RAM to be banked in
# D800-FFFF (54-64K) OS, but there is RAM to be banked in
# Call them XE0,1,2,3,4 -- 4 is the underlying low RAM

# Banks XE0 and XE1 are dictionary banks
# Bank XE4 (the real RAM) is the old title bank; unlike the other banks,
# it's loaded in multiple chunks so that the title can be updated.

    ZP:         file = "", define = yes, start = $0082, size = $007E;

# file header, just $FFFF
    HEADER:     file = %O,               start = $0000, size = $0002;

# 130XE check. This will show an error on anything but a 130XE, and then hang.
    XECHKHDR:  file = %O,               start = $0000, size = $0004;
    XECHKCHNK: file = %O,               start = $2E00, size = $0058;
    XECHKTRL:  file = %O,               start = $0000, size = $0006;

# Disable built-in BASIC on XL
    BASICCHKHDR:  file = %O,               start = $0000, size = $0004;
    BASICCHKCHNK: file = %O,               start = $2E00, size = $0068;
    BASICCHKTRL:  file = %O,               start = $0000, size = $0006;

# Title screen "LOADING ROBOT"
    TITLEHDR:   file = %O,               start = $0000, size = $0004;
    TITLE:      file = %O, define = yes, start = $4000, size = $01A7;
    TITLETRL:   file = %O,               start = $0000, size = $0006;

# LOWCODE and LOWBSS - the bankswitch code is in here
# This is the beginning of the $8000 area, which is mostly in BIG
    LOWCODE_HDR: file = %O,               start = $0000, size = $0004;
    LOWCODECHNK: file = %O, define = yes, start = $8000, size = $01FE;

# unused load segment
    XEBANK3_LOAD: file = "",             start = $0000, size = $0006;

# "Robot pics" load chunk - bank XE2 - the image data that used to be scattered all over the place
    XEBANK2_LOAD: file = %O,             start = $0000, size = $0006;
    XEBANK2_HDR:     file = %O,               start = $0000, size = $0004;
    VOR:        file = %O, define = yes, start = $4000, size = $3F97;


# Credits screen "LOADING DICTIONARY."
    XEBANK4_LOAD: file = %O,             start = $0000, size = $0008;
    TITLECHDR:  file = %O,               start = $0000, size = $0004;
    TITLECRED:  file = %O, define = yes, start = $4200, size = $0299;
    TITLECTRL:  file = %O,               start = $0000, size = $0006;


# "Dictionary" load chunk - the four DICT segments - banks XE0 and XE1
    XEBANK0_LOAD: file = %O,             start = $0000, size = $0006;
    XEBANK0_HDR:  file = %O,               start = $0000, size = $0004;
    DICT0:        file = %O, define = yes, start = $4000, size = $3CD0;

# License screen "LOADING DICTIONARY.."
    XEBANK4_LOADB: file = %O,             start = $0000, size = $0008;
    TITLELHDR:  file = %O,               start = $0000, size = $0004;
    TITLELIC:   file = %O, define = yes, start = $4500, size = $03E9;
    TITLELTRL:  file = %O,               start = $0000, size = $0006;

    XEBANK1_LOAD: file = %O,               start = $0000, size = $0006;
    XEBANK1_HDR:  file = %O,               start = $0000, size = $0004;
    DICT1:        file = %O, define = yes, start = $4000, size = $38B0;

# Instruction screen "LOADING GAME..."
    XEBANK4_LOADC: file = %O,             start = $0000, size = $0006;
    TITLEIHDR:  file = %O,               start = $0000, size = $0004;
    TITLEINST:  file = %O, define = yes, start = $4900, size = $00EA;
    TITLEITRL:  file = %O,               start = $0000, size = $0006;

# "Big segments" load chunk - the bulk of the game
# BIG+LOWCODE = $4000 16KB
    BIGHDR:     file = %O,               start = $0000, size = $0004;
    BIG:        file = %O, define = yes, start = $8200, size = $254B;

# "Once" load chunk - XE4 - the rest of the stuff that doesn't fit in BIG & TITLE
# TRAMPOLINED goes here, as well as CUEBALL which has to be in the same bank
    TRAMPHDR:   file = %O,               start = $0000, size = $0004;
    TRAMP:      file = %O, define = yes, start = $5000, size = $15E1;

# "main program" load chunk
    MAINHDR:    file = %O,               start = $0000, size = $0004;
    MAIN:       file = %O, define = yes, start = %S,    size = $BC20 - __STACKSIZE__ - __RESERVED_MEMORY__ - %S;
    TRAILER:    file = %O,               start = $0000, size = $0006;
}

SEGMENTS {
    # not on disk
    ZEROPAGE:  load = ZP,         type = zp;
    EXTZP:     load = ZP,         type = zp,                optional = yes;
    EXEHDR:    load = HEADER,     type = ro;

    # Disable built-in BASIC on XL
    BASICCHKHDR: load = BASICCHKHDR,  type = ro,                optional = yes;
    BASICCHK:    load = BASICCHKCHNK, type = rw,  define = yes, optional = yes;
    BASICCHKTRL: load = BASICCHKTRL,  type = ro,                optional = yes;

    # system check load chunk
    XECHKHDR: load = XECHKHDR,  type = ro,                optional = yes;
    XECHK:    load = XECHKCHNK, type = rw,  define = yes, optional = yes;
    XECHKTRL: load = XECHKTRL,  type = ro,                optional = yes;

    XEBANK3_LOAD:  load = XEBANK3_LOAD,   type = ro,                optional = yes;
    XEBANK4_LOAD:  load = XEBANK4_LOAD,   type = ro,                optional = yes;
    XEBANK4_LOADB: load = XEBANK4_LOADB,  type = ro,                optional = yes;
    XEBANK4_LOADC: load = XEBANK4_LOADC,  type = ro,                optional = yes;

    # Title load chunk - main
    TITLE_HDR:    load = TITLEHDR, type = ro;
    TITLE_PAGE:   load = TITLE,    type = rw,  define = yes;
    TITLE_TRL:    load = TITLETRL, type = ro;

    # LOWCODE and LOWBSS, where the bankswitch code is
    LOWCODE_HDR: load = LOWCODE_HDR, type = ro,                optional = yes;
    LOWCODE:     load = LOWCODECHNK, type = ro,  define = yes, optional = yes;
    LOWBSS:      load = LOWCODECHNK, type = bss,               optional = yes;  # not zero initialized

    # Title load chunk - credits
    TITLEC_HDR:   load = TITLECHDR, type = ro;
    TITLEC_PAGE:  load = TITLECRED, type = rw,  define = yes;
    TITLEC_TRL:   load = TITLECTRL, type = ro;

    # Title load chunk - instructions
    TITLEI_HDR:   load = TITLEIHDR, type = ro;
    TITLEI_PAGE:  load = TITLEINST, type = rw,  define = yes;
    TITLEI_TRL:   load = TITLEITRL, type = ro;

    # Title load chunk - license
    TITLEL_HDR:   load = TITLELHDR, type = ro;
    TITLEL_PAGE:  load = TITLELIC,  type = rw,  define = yes;
    TITLEL_TRL:   load = TITLELTRL, type = ro;

    # Dictionary load chunk
    XEBANK0_LOAD: load = XEBANK0_LOAD,  type = ro,                optional = yes;
    XEBANK0_HDR:   load = XEBANK0_HDR, type = ro;
    DICT_BANK_1:   load = DICT0,    type = ro,    define = yes;
    DICT_BANK_2:   load = DICT0,    type = ro,    define = yes;

    XEBANK1_LOAD: load = XEBANK1_LOAD,  type = ro,                optional = yes;
    XEBANK1_HDR:   load = XEBANK1_HDR, type = ro;
    DICT_BANK_3:   load = DICT1,    type = ro,    define = yes;
    DICT_BANK_4:   load = DICT1,    type = ro,    define = yes;

    # Robot pics load chunk
    XEBANK2_LOAD: load = XEBANK2_LOAD,  type = ro,                optional = yes;
    XEBANK2_HDR:  load = XEBANK2_HDR,   type = ro;
    VOR_PICS0:   load = VOR,     type = ro,  define = yes, optional = yes;
    VOR_PICS1:   load = VOR,     type = ro,  define = yes, optional = yes;
    VOR_PICS2:   load = VOR,     type = ro,  define = yes, optional = yes;
    VOR_PICS3:   load = VOR,     type = ro,  define = yes, optional = yes;
    VOR_PICS4:   load = VOR,     type = ro,  define = yes, optional = yes;
    VOR_PICS5:   load = VOR,     type = ro,  define = yes, optional = yes;
    VOR_IDX:     load = VOR,     type = ro,  define = yes;
    VOR_CODE:    load = VOR,     type = ro,  define = yes;


    # Big segments load chunk
    BIGHDR:    load = BIGHDR,  type = ro;
    CODE:      load = BIG,     type = ro,  define = yes;
    APP:       load = BIG,     type = ro,  define = yes;
    VOR_VIEW:      load = BIG, type = ro,  define = yes;
    TRAMPOLINES:   load = BIG, type = ro,  define = yes;
    DA:        load = BIG,     type = ro,  define = yes;
    VIEW:      load = BIG,     type = ro,  define = yes;
    DATA:      load = BIG,     type = rw,  define = yes;
    COPYRIGHT_ROM: load = BIG, type = ro,  define = yes;


    # Rest of the segments load chunk
    TRAMPHDR:    load = TRAMPHDR, type = ro;
    TRAMPOLINED: load = TRAMP,   type = ro,  define = yes;
    FONTDATA:    load = TRAMP,   type = ro,  define = yes;
    STARTUP:     load = TRAMP,   type = ro,  define = yes;
    ONCE:        load = TRAMP,   type = ro,  define = yes;
    CUEBALL:     load = TRAMP,   type = ro,  define = yes;
    COPYRIGHT:   load = TRAMP,   type = ro,  define = yes;

    # main load chunk
    MAINHDR:   load = MAINHDR,    type = ro;
    DS:        load = MAIN,       type = ro,  define = yes;
    MD:        load = MAIN,       type = ro,  define = yes;
    GAMEINIT:  load = MAIN,       type = ro,  define = yes;
    RODATA:    load = MAIN,       type = ro,  define = yes;
    BSS:       load = MAIN,       type = bss, define = yes;
    INIT:      load = MAIN,       type = bss,               optional = yes;
    AUTOSTRT:  load = TRAILER,    type = ro;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
