# Copyright (c) 2025 Gerald Reno, Jr.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0

FEATURES {
    # There's a reason everyone uses $2000 here though.
    STARTADDRESS: default = $2000;
}
SYMBOLS {
    __EXEHDR__:          type = import;
    __SYSTEM_CHECK__:    type = import;  # force inclusion of "system check" load chunk
    __AUTOSTART__:       type = import;  # force inclusion of autostart "trailer"
    __STACKSIZE__:       type = weak,   value = $0200; # 512 byte stack
    __STARTADDRESS__:    type = export, value = %S;
    __RESERVED_MEMORY__: type = export, value = $8000 - $3E0; # 2K for a single screen page, 2K for fonts, $410 for screen RAM (minus the OOB screen RAM) $1410-3E0 = 1030. Plus another 32K for all the stuff I want to load.
    TITLE_BANK_ID:       type = export, value=4; # Cart bank that the TITLEPAGE is in - 2 for 32K, 6 for 64K
    STARTUP_BANK_ID:     type = export, value=4; # Cart bank that the STARTUP,ONCE,GAMEINIT,DATA segments are in, same as TITLE, probably
    FONTDATA_BANK_ID:    type = export, value=4; # Cart bank that the font data segments are in, same as STARTUP, probably
    TRAMPOLINE_BANK_ID:  type = export, value=4; # bank that the trampoline code is in
}
MEMORY {
#
# 130XE LAYOUT
#
# 0000-3FFF (00-16K) ZP,MAIN, and the reserved memory: Just like a 600XL!
# 4000-7FFF (16-32K) Five bank-switched blocks at the same address.
# 8000-BFFF (32-48K) the 16K where the cartridge would be. (BASIC can be bankswitched in)
# C000-CFFF (48-52K) OS, but there is RAM to be banked in
# D800-FFFF (54-64K) OS, but there is RAM to be banked in
# Call them XE0,1,2,3,4 -- 4 is the underlying low RAM

# Banks XE0 and XE1 are dictionary banks
# Bank XE4 (the real RAM) is the old title bank; unlike the other banks,
# it's loaded in multiple chunks so that the title can be updated.

    ZP:         file = "", define = yes, start = $0082, size = $007E;

# file header, just $FFFF
    HEADER:     file = %O,               start = $0000, size = $0002;

# CC65 "system check" load chunk
# This checks that there's enough RAM.
    SYSCHKHDR:  file = %O,               start = $0000, size = $0004;
    SYSCHKCHNK: file = %O,               start = $2E00, size = $0300;
    SYSCHKTRL:  file = %O,               start = $0000, size = $0006;

# LOWCODE chunk, where the bankswitch code is
    LOWCODE_HDR:  file = %O,             start = $0000, size = $0004;
    LOWCODE:      file = %O,             start = $8000, size = $0300;

# XE bank 0
    XEBANK0_LOAD: file = %O,             start = $0000, size = $0006;
    XEBANK0_HDR:  file = %O,             start = $0000, size = $0004;
    XEBANK0:      file = %O,             start = $4000, size = $8000;

# XE bank 1
    XEBANK1_LOAD: file = %O,             start = $0000, size = $0006;
    XEBANK1_HDR:  file = %O,             start = $0000, size = $0004;
    XEBANK1:      file = %O,             start = $4000, size = $8000;

# XE bank 2
    XEBANK2_LOAD: file = %O,             start = $0000, size = $0006;
    XEBANK2_HDR:  file = %O,             start = $0000, size = $0004;
    XEBANK2:      file = %O,             start = $4000, size = $8000;

# unused XE loads
    XEBANK3_LOAD: file = %O,             start = $0000, size = $0006;
    XEBANK4_LOAD: file = %O,             start = $0000, size = $0006;

# "main program" load chunk
    MAINHDR:    file = %O,               start = $0000, size = $0004;
    MAIN:       file = %O, define = yes, start = %S,    size = $BC20 - __STACKSIZE__ - __RESERVED_MEMORY__ - %S;
    TRAILER:    file = %O,               start = $0000, size = $0006;
}

SEGMENTS {
    # not on disk
    ZEROPAGE:  load = ZP,         type = zp;
    EXTZP:     load = ZP,         type = zp,                optional = yes;
    EXEHDR:    load = HEADER,     type = ro;

    # system check load chunk
    SYSCHKHDR: load = SYSCHKHDR,  type = ro,                optional = yes;
    SYSCHK:    load = SYSCHKCHNK, type = rw,  define = yes, optional = yes;
    SYSCHKTRL: load = SYSCHKTRL,  type = ro,                optional = yes;

    # lowcode, where the bankswitch code is
    LOWCODE_HDR: load = LOWCODE_HDR,  type = ro,                optional = yes;
    LOWCODE:   load = LOWCODE,        type = ro,  define = yes, optional = yes;

    # XE bank 0, dictionary bank 0
    XEBANK0_LOAD: load = XEBANK0_LOAD,  type = ro,                optional = yes;
    XEBANK0_HDR: load = XEBANK0_HDR,  type = ro,                optional = yes;
    CARTBANK0:    load = XEBANK0,     type = ro,  define = yes;

    # XE bank 1, dictionary bank 1
    XEBANK1_LOAD: load = XEBANK1_LOAD,  type = ro,                optional = yes;
    XEBANK1_HDR: load = XEBANK1_HDR,  type = ro,                optional = yes;
    CARTBANK1:    load = XEBANK1,     type = ro,  define = yes;

    # XE bank 2, dictionary bank 2
    XEBANK2_LOAD: load = XEBANK2_LOAD,  type = ro,                optional = yes;
    XEBANK2_HDR: load = XEBANK2_HDR,  type = ro,                optional = yes;
    CARTBANK2:    load = XEBANK2,     type = ro,  define = yes;

    # unused XE load headers
    XEBANK3_LOAD: load = XEBANK3_LOAD,  type = ro,                optional = yes;
    XEBANK4_LOAD: load = XEBANK4_LOAD,  type = ro,                optional = yes;

    # main load chunk
    MAINHDR:   load = MAINHDR,    type = ro;
    STARTUP:   load = MAIN,       type = ro,  define = yes;
    ONCE:      load = MAIN,       type = ro,  define = yes;
    LOWBSS:    load = MAIN,       type = rw,                optional = yes;  # not zero initialized
    INIT:      load = MAIN,       type = bss,               optional = yes;
    CODE:      load = MAIN,       type = ro,  define = yes, optional = yes;
    MD:        load = MAIN,       type = ro,  define = yes, optional = yes;
    DATA:      load = MAIN,       type = rw,  define = yes;
    RODATA:    load = MAIN,       type = ro,  define = yes;
    BSS:       load = MAIN,       type = bss, define = yes;
    AUTOSTRT:  load = TRAILER,    type = ro;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
